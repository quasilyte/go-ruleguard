// Code generated by "stringer -type=operation -trimprefix=op"; DO NOT EDIT.

package gogrep

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[opInvalid-0]
	_ = x[opNode-1]
	_ = x[opNamedNode-2]
	_ = x[opNodeSeq-3]
	_ = x[opNamedNodeSeq-4]
	_ = x[opOptNode-5]
	_ = x[opNamedOptNode-6]
	_ = x[opMultiStmt-7]
	_ = x[opMultiExpr-8]
	_ = x[opEnd-9]
	_ = x[opBasicLit-10]
	_ = x[opStrictIntLit-11]
	_ = x[opStrictFloatLit-12]
	_ = x[opStrictCharLit-13]
	_ = x[opStrictStringLit-14]
	_ = x[opStrictComplexLit-15]
	_ = x[opIdent-16]
	_ = x[opStdlibPkg-17]
	_ = x[opIndexExpr-18]
	_ = x[opSliceExpr-19]
	_ = x[opSliceFromExpr-20]
	_ = x[opSliceToExpr-21]
	_ = x[opSliceFromToExpr-22]
	_ = x[opSliceToCapExpr-23]
	_ = x[opSliceFromToCapExpr-24]
	_ = x[opFuncLit-25]
	_ = x[opCompositeLit-26]
	_ = x[opTypedCompositeLit-27]
	_ = x[opSimpleSelectorExpr-28]
	_ = x[opSelectorExpr-29]
	_ = x[opTypeAssertExpr-30]
	_ = x[opTypeSwitchAssertExpr-31]
	_ = x[opVoidFuncType-32]
	_ = x[opFuncType-33]
	_ = x[opArrayType-34]
	_ = x[opSliceType-35]
	_ = x[opMapType-36]
	_ = x[opChanType-37]
	_ = x[opKeyValueExpr-38]
	_ = x[opEllipsis-39]
	_ = x[opTypedEllipsis-40]
	_ = x[opStarExpr-41]
	_ = x[opUnaryExpr-42]
	_ = x[opBinaryExpr-43]
	_ = x[opParenExpr-44]
	_ = x[opArgList-45]
	_ = x[opSimpleArgList-46]
	_ = x[opVariadicCallExpr-47]
	_ = x[opNonVariadicCallExpr-48]
	_ = x[opCallExpr-49]
	_ = x[opAssignStmt-50]
	_ = x[opMultiAssignStmt-51]
	_ = x[opBranchStmt-52]
	_ = x[opSimpleLabeledBranchStmt-53]
	_ = x[opLabeledBranchStmt-54]
	_ = x[opSimpleLabeledStmt-55]
	_ = x[opLabeledStmt-56]
	_ = x[opBlockStmt-57]
	_ = x[opExprStmt-58]
	_ = x[opGoStmt-59]
	_ = x[opDeferStmt-60]
	_ = x[opSendStmt-61]
	_ = x[opEmptyStmt-62]
	_ = x[opIncDecStmt-63]
	_ = x[opReturnStmt-64]
	_ = x[opIfStmt-65]
	_ = x[opIfInitStmt-66]
	_ = x[opIfElseStmt-67]
	_ = x[opIfInitElseStmt-68]
	_ = x[opIfNamedOptStmt-69]
	_ = x[opIfNamedOptElseStmt-70]
	_ = x[opSwitchStmt-71]
	_ = x[opSwitchTagStmt-72]
	_ = x[opSwitchInitStmt-73]
	_ = x[opSwitchInitTagStmt-74]
	_ = x[opSelectStmt-75]
	_ = x[opTypeSwitchStmt-76]
	_ = x[opTypeSwitchInitStmt-77]
	_ = x[opCaseClause-78]
	_ = x[opDefaultCaseClause-79]
	_ = x[opCommClause-80]
	_ = x[opDefaultCommClause-81]
	_ = x[opForStmt-82]
	_ = x[opForPostStmt-83]
	_ = x[opForCondStmt-84]
	_ = x[opForCondPostStmt-85]
	_ = x[opForInitStmt-86]
	_ = x[opForInitPostStmt-87]
	_ = x[opForInitCondStmt-88]
	_ = x[opForInitCondPostStmt-89]
	_ = x[opRangeStmt-90]
	_ = x[opRangeKeyStmt-91]
	_ = x[opRangeKeyValueStmt-92]
	_ = x[opFieldList-93]
	_ = x[opUnnamedField-94]
	_ = x[opSimpleField-95]
	_ = x[opField-96]
	_ = x[opMultiField-97]
	_ = x[opValueSpec-98]
	_ = x[opValueInitSpec-99]
	_ = x[opTypedValueInitSpec-100]
	_ = x[opTypedValueSpec-101]
	_ = x[opTypeSpec-102]
	_ = x[opTypeAliasSpec-103]
	_ = x[opFuncDecl-104]
	_ = x[opMethodDecl-105]
	_ = x[opFuncProtoDecl-106]
	_ = x[opMethodProtoDecl-107]
	_ = x[opDeclStmt-108]
	_ = x[opConstDecl-109]
	_ = x[opVarDecl-110]
	_ = x[opTypeDecl-111]
	_ = x[opEmptyPackage-112]
}

const _operation_name = "InvalidNodeNamedNodeNodeSeqNamedNodeSeqOptNodeNamedOptNodeMultiStmtMultiExprEndBasicLitStrictIntLitStrictFloatLitStrictCharLitStrictStringLitStrictComplexLitIdentStdlibPkgIndexExprSliceExprSliceFromExprSliceToExprSliceFromToExprSliceToCapExprSliceFromToCapExprFuncLitCompositeLitTypedCompositeLitSimpleSelectorExprSelectorExprTypeAssertExprTypeSwitchAssertExprVoidFuncTypeFuncTypeArrayTypeSliceTypeMapTypeChanTypeKeyValueExprEllipsisTypedEllipsisStarExprUnaryExprBinaryExprParenExprArgListSimpleArgListVariadicCallExprNonVariadicCallExprCallExprAssignStmtMultiAssignStmtBranchStmtSimpleLabeledBranchStmtLabeledBranchStmtSimpleLabeledStmtLabeledStmtBlockStmtExprStmtGoStmtDeferStmtSendStmtEmptyStmtIncDecStmtReturnStmtIfStmtIfInitStmtIfElseStmtIfInitElseStmtIfNamedOptStmtIfNamedOptElseStmtSwitchStmtSwitchTagStmtSwitchInitStmtSwitchInitTagStmtSelectStmtTypeSwitchStmtTypeSwitchInitStmtCaseClauseDefaultCaseClauseCommClauseDefaultCommClauseForStmtForPostStmtForCondStmtForCondPostStmtForInitStmtForInitPostStmtForInitCondStmtForInitCondPostStmtRangeStmtRangeKeyStmtRangeKeyValueStmtFieldListUnnamedFieldSimpleFieldFieldMultiFieldValueSpecValueInitSpecTypedValueInitSpecTypedValueSpecTypeSpecTypeAliasSpecFuncDeclMethodDeclFuncProtoDeclMethodProtoDeclDeclStmtConstDeclVarDeclTypeDeclEmptyPackage"

var _operation_index = [...]uint16{0, 7, 11, 20, 27, 39, 46, 58, 67, 76, 79, 87, 99, 113, 126, 141, 157, 162, 171, 180, 189, 202, 213, 228, 242, 260, 267, 279, 296, 314, 326, 340, 360, 372, 380, 389, 398, 405, 413, 425, 433, 446, 454, 463, 473, 482, 489, 502, 518, 537, 545, 555, 570, 580, 603, 620, 637, 648, 657, 665, 671, 680, 688, 697, 707, 717, 723, 733, 743, 757, 771, 789, 799, 812, 826, 843, 853, 867, 885, 895, 912, 922, 939, 946, 957, 968, 983, 994, 1009, 1024, 1043, 1052, 1064, 1081, 1090, 1102, 1113, 1118, 1128, 1137, 1150, 1168, 1182, 1190, 1203, 1211, 1221, 1234, 1249, 1257, 1266, 1273, 1281, 1293}

func (i operation) String() string {
	if i >= operation(len(_operation_index)-1) {
		return "operation(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _operation_name[_operation_index[i]:_operation_index[i+1]]
}
